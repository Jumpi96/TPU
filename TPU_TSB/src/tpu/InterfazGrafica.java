/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tpu;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultRowSorter;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import java.awt.HeadlessException;
import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JOptionPane;



public class InterfazGrafica extends javax.swing.JFrame {
    
    private GestorProcesamiento g;
     File archivos[];

    
    
    public InterfazGrafica() {
        initComponents();
        //scrollpaneLista = new JScrollPane();
        //lista = new JList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePalabras = new javax.swing.JTable();
        jTxtFiltro = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnSeleccionarArchivo = new javax.swing.JButton();
        btnCargar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtbl_archivosSelec = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTablePalabras.setAutoCreateRowSorter(true);
        jTablePalabras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Palabra", "Repeticiones", "Apariciones"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePalabras.setColumnSelectionAllowed(true);
        jTablePalabras.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTablePalabras);
        jTablePalabras.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTablePalabras.getColumnModel().getColumnCount() > 0) {
            jTablePalabras.getColumnModel().getColumn(0).setResizable(false);
            jTablePalabras.getColumnModel().getColumn(1).setResizable(false);
            jTablePalabras.getColumnModel().getColumn(2).setResizable(false);
        }

        jLabel1.setText("Buscar");

        btnSeleccionarArchivo.setText("Seleccionar Archivo");
        btnSeleccionarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarArchivoActionPerformed(evt);
            }
        });

        btnCargar.setText("Cargar");
        btnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarActionPerformed(evt);
            }
        });

        jLabel3.setText("Lista de archivos seleccionados:");

        jtbl_archivosSelec.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombre Archivo", "Ruta", "Tamaño", "Carga Exitosa"
            }
        ));
        jScrollPane3.setViewportView(jtbl_archivosSelec);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
                        .addGap(259, 259, 259))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSeleccionarArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(142, 142, 142)
                                .addComponent(btnCargar))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(80, 451, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTxtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSeleccionarArchivo)
                    .addComponent(btnCargar))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTxtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSeleccionarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarArchivoActionPerformed
        JFileChooser dialogo = new JFileChooser();
        dialogo.setDialogTitle("Abrir");
        dialogo.setMultiSelectionEnabled(true);

        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos txt","txt");
        dialogo.setFileFilter(filtro);
        if(dialogo.showOpenDialog(null)==JFileChooser.APPROVE_OPTION)
        {
            archivos=dialogo.getSelectedFiles();
            DefaultTableModel modelo = new DefaultTableModel();
            String[] columnNames={"Nombre de archivo","Ruta","Tamaño","Estado"};
            modelo.setColumnIdentifiers(columnNames);
            Object[] fila = new Object[modelo.getColumnCount()];
            for(File f:archivos){
                fila[0] = f.getName();
                fila[1] = f.getAbsolutePath();
                fila[2] = f.length()+" bytes";
                fila[3] = "Esperando";
                modelo.addRow(fila);
            }
            jtbl_archivosSelec.setModel(modelo);

        }
    }//GEN-LAST:event_btnSeleccionarArchivoActionPerformed

    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarActionPerformed
        // TODO add your handling code here:        
        try {
            DefaultTableModel modelo = new DefaultTableModel();
            String[] columnNames={"Nombre de archivo","Ruta","Tamaño","Estado"};
            modelo.setColumnIdentifiers(columnNames);
            Object[] fila = new Object[modelo.getColumnCount()];

            for(File f:archivos){                
                fila[0] = f.getName();
                fila[1] = f.getAbsolutePath();
                fila[2] = f.length()+" bytes";                
                if(!g.procesar(f.getAbsolutePath())){
                    JOptionPane.showMessageDialog(this, "Ya ha cargado el archivo: "
                        + f.getName()+"\n Intente con otro", "Archivo ya cargado", JOptionPane.INFORMATION_MESSAGE);
                    fila[3]="Fallo, archivo cargado...";
                }else{
                    fila[3]="Exito...";
                }
                modelo.addRow(fila);
            }
            jtbl_archivosSelec.setModel(modelo);
            this.llenarGrilla("");

        }

        catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar ");
        }

    }//GEN-LAST:event_btnCargarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new InterfazGrafica().setVisible(true);
            }
                      
            
        });
        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargar;
    private javax.swing.JButton btnSeleccionarArchivo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTablePalabras;
    private javax.swing.JTextField jTxtFiltro;
    private javax.swing.JTable jtbl_archivosSelec;
    // End of variables declaration//GEN-END:variables


    private void llenarGrilla(String filtro) {     
        HashMap<String, int[]> hashCompleto = g.getHashCompleto();
        Set<String> s = hashCompleto.keySet();
        Iterator it = s.iterator();
        
        DefaultTableModel model= (DefaultTableModel) jTablePalabras.getModel();;
        model.setRowCount(0);
        
        
        
        String palabra;
        if (filtro.equals("")) {
            while(it.hasNext()){
                palabra = (String)it.next();
                int[] v = hashCompleto.get(palabra);            
                model.addRow(new Object[]{palabra,v[0],v[1]});
            }
        }
        else
        {
            filtro=filtro.toLowerCase();
            while(it.hasNext()){
                palabra = (String)it.next();
                if (palabra.toLowerCase().startsWith(filtro)) {
                    int[] v = hashCompleto.get(palabra);            
                    model.addRow(new Object[]{palabra,v[0],v[1]});
                }
            }
        }
            
        DefaultRowSorter sorter = ((DefaultRowSorter) jTablePalabras.getRowSorter());
        List<RowSorter.SortKey> sortKeys = new ArrayList<RowSorter.SortKey>();
        sortKeys.add(new RowSorter.SortKey(1, SortOrder.DESCENDING));
        sorter.setSortKeys(sortKeys);
        
     }
    
    private void llenarLista() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    public void habilitarPantalla(GestorProcesamiento g) {
        this.g=g;
        llenarGrilla("");
        
        this.jTxtFiltro.getDocument().addDocumentListener(new DocumentListener(){
            public void changedUpdate(DocumentEvent e){actualizarGrilla();}
            public void removeUpdate(DocumentEvent e){actualizarGrilla();}
            public void insertUpdate(DocumentEvent e){actualizarGrilla();}
          });
        
        this.setVisible(true);
    }
    
    private void actualizarGrilla(){
        llenarGrilla(this.jTxtFiltro.getText());
    }

   
 }
    

